#ln[1]
import os
import matplotlib.pyplot as plt
import cv2
import zipfile
#ln[2]
extract_to = &#39;./dataset&#39;
with zipfile.ZipFile(&#39;dataset.zip&#39;, &#39;r&#39;) as zip_ref:
zip_ref.extractall(extract_to)
print(f&quot;Files extracted to: {extract_to}&quot;)
#ln[3]
drowsy_folder = &#39;./dataset/Driver Drowsiness Dataset (DDD)/Drowsy&#39;
non_drowsy_folder = &#39;./dataset/Driver Drowsiness Dataset (DDD)/Non Drowsy&#39;
# Get image filenames
drowsy_images = os.listdir(drowsy_folder)
non_drowsy_images = os.listdir(non_drowsy_folder)
#ln[4]
# Helper function to visualize images
def plot_images(folder, image_list, title):
plt.figure(figsize=(10, 5))
for i, img_name in enumerate(image_list[:5]):
img_path = os.path.join(folder, img_name)
img = cv2.imread(img_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.subplot(1, 5, i+1)
print(img.shape)
plt.imshow(img)
plt.title(title)
plt.axis(&#39;off&#39;)
plt.show()
#ln[5]
# Plot some samples
plot_images(drowsy_folder, drowsy_images, &#39;Drowsy&#39;)
#ln[6]
plot_images(non_drowsy_folder, non_drowsy_images, &#39;Non Drowsy&#39;)

#ln[7]
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + &#39;haarcascade_frontalface_default.xml&#39;)
def process_image(img_path):
img = cv2.imread(img_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
# Detect face
faces = face_cascade.detectMultiScale(img, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
if len(faces) == 0:
return None # Return None if no face detected
# Get the first detected face
x, y, w, h = faces[0]
face = img[y:y+h, x:x+w]
face = cv2.resize(face, (112, 112))
return face / 255.0
#ln[8]
di = drowsy_images[:5000]
ndi = non_drowsy_images[:5000]
#ln[9]
drowsy_data = [process_image(os.path.join(drowsy_folder, img_name)) for img_name in di]
# Filter out None values (images where no face was detected)
drowsy_data = [img for img in drowsy_data if img is not None]
#ln[10]
non_drowsy_data = [process_image(os.path.join(non_drowsy_folder, img_name)) for img_name in ndi]
# Filter out None values (images where no face was detected)
non_drowsy_data = [img for img in non_drowsy_data if img is not None]
#ln[11]
import numpy as np
from sklearn.model_selection import train_test_split
from keras.preprocessing.image import ImageDataGenerator
# Combine data and create labels
X = np.array(drowsy_data + non_drowsy_data)
y = np.array([1]*len(drowsy_data) + [0]*len(non_drowsy_data))
# Split the data
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5)

#ln[12]
&#39;&#39;&#39;datagen = ImageDataGenerator(
rotation_range=20,
width_shift_range=0.2,
height_shift_range=0.2,
horizontal_flip=True
)
datagen.fit(X_train)&#39;&#39;&#39;
#ln[13]
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
model = Sequential()
model.add(Conv2D(32, (3, 3), activation=&#39;relu&#39;, input_shape=(112, 112, 3)))
model.add(MaxPooling2D(2, 2))
model.add(Conv2D(64, (3, 3), activation=&#39;relu&#39;))
model.add(MaxPooling2D(2, 2))
model.add(Flatten())
model.add(Dense(512, activation=&#39;relu&#39;))
model.add(Dense(1, activation=&#39;sigmoid&#39;))
model.compile(loss=&#39;binary_crossentropy&#39;, optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;])
model.summary()
#ln[14]
model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=10)
#ln[15]
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f&quot;Test accuracy: {test_acc:.4f}&quot;)
#ln[16]
y_pred_prob = model.predict(X_test)
y_pred = (y_pred_prob &gt; 0.5).astype(int).flatten()
#ln[17]
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
accuracyScores = []
precisionScores = []
recallScores = []
f1Scores = []
acc = accuracy_score(y_test, y_pred)

accuracyScores.append(acc)
pre = precision_score(y_test,y_pred)
precisionScores.append(pre)
rec = recall_score(y_test,y_pred)
recallScores.append(rec)
f1score = f1_score(y_test,y_pred)
f1Scores.append(f1score)
#ln[18]
print(confusion_matrix(y_test,y_pred))
#ln[19]
from keras.applications.vgg16 import VGG16
from keras.layers import GlobalAveragePooling2D
vgg16_base = VGG16(weights=&#39;imagenet&#39;, include_top=False, input_shape=(112, 112, 3))
vgg16_base.trainable = False # Freeze the VGG16 layers
vgg16_model = Sequential([
vgg16_base,
GlobalAveragePooling2D(),
Dense(512, activation=&#39;relu&#39;),
Dense(1, activation=&#39;sigmoid&#39;)
])
vgg16_model.compile(loss=&#39;binary_crossentropy&#39;, optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;])
vgg16_model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=5)

#ln[20]
y_pred_prob = vgg16_model.predict(X_test)
y_pred = (y_pred_prob &gt; 0.5).astype(int).flatten()
#ln[21]
print(confusion_matrix(y_test,y_pred))
#ln[22]
acc = accuracy_score(y_test, y_pred)
accuracyScores.append(acc)
pre = precision_score(y_test,y_pred)
precisionScores.append(pre)
rec = recall_score(y_test,y_pred)
recallScores.append(rec)
f1score = f1_score(y_test,y_pred)
f1Scores.append(f1score)

#ln[23]
from keras.applications.resnet50 import ResNet50
resnet50_base = ResNet50(weights=&#39;imagenet&#39;, include_top=False, input_shape=(112, 112, 3))
resnet50_base.trainable = False # Freeze the ResNet50 layers
resnet50_model = Sequential([
resnet50_base,
GlobalAveragePooling2D(),
Dense(512, activation=&#39;relu&#39;),
Dense(1, activation=&#39;sigmoid&#39;)
])
resnet50_model.compile(loss=&#39;binary_crossentropy&#39;, optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;])
#ln[24]
resnet50_model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=5)
#ln[25]
y_pred_prob = resnet50_model.predict(X_test)
y_pred = (y_pred_prob &gt; 0.5).astype(int).flatten()
#ln[26]
print(confusion_matrix(y_test,y_pred))
#ln[27]
acc = accuracy_score(y_test, y_pred)
accuracyScores.append(acc)
pre = precision_score(y_test,y_pred)
precisionScores.append(pre)
rec = recall_score(y_test,y_pred)
recallScores.append(rec)
f1score = f1_score(y_test,y_pred)
f1Scores.append(f1score)
#ln[28]
from keras.applications.inception_v3 import InceptionV3
#ln[29]
inception_base = InceptionV3(weights=&#39;imagenet&#39;, include_top=False, input_shape=(112, 112, 3))
inception_base.trainable = False # Freeze the InceptionV3 layers
inception_model = Sequential([
inception_base,
GlobalAveragePooling2D(),

Dense(512, activation=&#39;relu&#39;),
Dense(1, activation=&#39;sigmoid&#39;)
])
inception_model.compile(loss=&#39;binary_crossentropy&#39;, optimizer=&#39;adam&#39;, metrics=[&#39;accuracy&#39;])
#ln[30]
inception_model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=5)
#ln[31]
y_pred_prob = inception_model.predict(X_test)
y_pred = (y_pred_prob &gt; 0.5).astype(int).flatten()
#ln[32]
print(confusion_matrix(y_test,y_pred))
#ln[33]
acc = accuracy_score(y_test, y_pred)
accuracyScores.append(acc)
pre = precision_score(y_test,y_pred)
precisionScores.append(pre)
rec = recall_score(y_test,y_pred)
recallScores.append(rec)
f1score = f1_score(y_test,y_pred)
f1Scores.append(f1score)
#ln[34]
import keras
import numpy as np
import matplotlib.pyplot as plt
def get_feature_model(base_model, layer_names):
outputs = [base_model.get_layer(name).output for name in layer_names]
model = keras.Model(inputs=base_model.inputs, outputs=outputs)
return model
#ln[35]
# Define the layers you want to visualize for each model
cnn_layers = [&#39;conv2d&#39;, &#39;conv2d_1&#39;]
vgg16_layers = [&#39;block1_conv1&#39;, &#39;block2_conv1&#39;, &#39;block3_conv1&#39;, &#39;block4_conv1&#39;, &#39;block5_conv1&#39;]
resnet50_layers = [&#39;conv1_conv&#39;, &#39;conv2_block1_1_conv&#39;, &#39;conv3_block1_1_conv&#39;, &#39;conv4_block1_1_conv&#39;,
&#39;conv5_block1_1_conv&#39;]
inceptionv3_layers = [&#39;conv2d_2&#39;, &#39;conv2d_3&#39;, &#39;conv2d_4&#39;, &#39;conv2d_5&#39;, &#39;conv2d_6&#39;]
cnn_feature_model = get_feature_model(model, cnn_layers)

vgg16_feature_model = get_feature_model(vgg16_base, vgg16_layers)
resnet50_feature_model = get_feature_model(resnet50_base, resnet50_layers)
inception_feature_model = get_feature_model(inception_base, inceptionv3_layers)
#ln[36]
def display_feature_maps(feature_model, img):
feature_maps = feature_model.predict(img)
for fmap in feature_maps:
print(fmap.shape)
num_features = fmap.shape[-1]
size = fmap.shape[1]
# Create a grid of plots
display_grid = int(np.sqrt(num_features))
fig, ax = plt.subplots(display_grid, display_grid, figsize=(20, 20))
# Plot each feature
for i in range(display_grid * display_grid):
row = i // display_grid
col = i % display_grid
ax[row, col].imshow(fmap[0, :, :, i], cmap=&#39;viridis&#39;)
ax[row, col].axis(&#39;off&#39;)
plt.subplots_adjust(wspace=0.1, hspace=0.1)
plt.show()

#ln[37]
import keras
def preprocess_image(img_path, target_size=(112, 112)):
img = keras.preprocessing.image.load_img(img_path, target_size=target_size)
img_array = keras.preprocessing.image.img_to_array(img)
return np.expand_dims(img_array, axis=0) / 255.0
image_path = &#39;./dataset/Driver Drowsiness Dataset (DDD)/Drowsy/&#39;+drowsy_images[20]
prepared_image = preprocess_image(image_path)
#ln[38]
display_feature_maps(cnn_feature_model, prepared_image)
#ln[39]
display_feature_maps(vgg16_feature_model, prepared_image)

#ln[40]
display_feature_maps(resnet50_feature_model, prepared_image)
#ln[41]
display_feature_maps(inception_feature_model, prepared_image)
#ln[42]
import pandas as pd
#ln[43]
olumns=[&#39;Accuracy&#39;,&#39;Precision&#39;,&#39;Recall&#39;, &#39;F1-score&#39;]
index=[&#39;CNN Model&#39;,&#39;VGG16&#39;,&#39;ResNet50&#39;,&#39;InceptionNetV3&#39;]
df = pd.DataFrame(list(zip(accuracyScores, precisionScores,recallScores,f1Scores)),
columns=columns,index=index )
print(df)
#ln[44]
df.plot.bar()
